# time complexity: O(n^2)
# space complexity: O(n)
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        l = len(nums)
        dp = [1]*l
        for i in range(l):
            for j in range(i):
                if nums[j] < nums[i]:
                    dp[i] = max(dp[i], dp[j]+1)
        return max(dp)
        
        
        Solution 2: Greedy with Binary Search

# solution 2: greed binary search
# In the above steps, we need to keep different sub arrays (sub1, sub2..., subk) which causes poor performance. But we notice that we can just keep one sub array, when new number x is not greater than the last element of the subsequence sub, we do binary search to find the smallest element >= x in sub, and replace with number x.
# Let's run that example nums = [2, 6, 8, 3, 4, 5, 1] again:
# Let pick the first element, sub = [2].
# 6 is greater than previous number, sub = [2, 6]
# 8 is greater than previous number, sub = [2, 6, 8]
# 3 is less than previous number, so we can't extend the subsequence sub. We need to find the smallest number >= 3 in sub, it's 6. Then we overwrite it, now sub = [2, 3, 8].
# 4 is less than previous number, so we can't extend the subsequence sub. We overwrite 8 by 4, so sub = [2, 3, 4].
# 5 is greater than previous number, sub = [2, 3, 4, 5].
# 1 is less than previous number, so we can't extend the subsequence sub. We overwrite 2 by 1, so sub = [1, 3, 4, 5].
# Finally, length of longest increase subsequence = len(sub) = 4.

# time complexity: O(nlogn)
# space complexity: O(n)
class Solution:  # 68 ms, faster than 93.92%
    def lengthOfLIS(self, nums: List[int]) -> int:
        sub = []
        for x in nums:
            if len(sub) == 0 or sub[-1] < x:
                sub.append(x)
            else:
                idx = bisect_left(sub, x)  # Find the index of the smallest number >= x
                sub[idx] = x  # Replace that number with x
        return len(sub)
